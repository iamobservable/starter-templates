services:
  auth:
    env_file: env/auth.env
    healthcheck:
      interval: 30s
      retries: 5
      start_period: 10s
      test: wget -qO- http://127.0.0.1:8080/health > /dev/null || exit 1
      timeout: 5s
    image: ghcr.io/iamobservable/jwt-auth-validator:0.1.0
    restart: unless-stopped

  docling:
    env_file: env/docling.env
    healthcheck:
      interval: 30s
      retries: 5
      start_period: 10s
      test: wget -qO- http://127.0.0.1:5001/health > /dev/null || exit 1
      timeout: 5s
    image: quay.io/docling-project/docling-serve:latest
    restart: unless-stopped

  edgetts:
    depends_on:
      - watchtower
    env_file: env/edgetts.env
    image: travisvn/openai-edge-tts:latest
    restart: unless-stopped

  mcp:
    command: --config /app/conf/config.json
    depends_on:
      - watchtower
    env_file: env/mcp.env
    healthcheck:
      interval: 30s
      retries: 5
      start_period: 5s
      test: "curl -fsSL http://127.0.0.1:8000/time/get_current_time -H 'Content-Type: application/json' -d '{\"timezone\": \"America/Chicago\"}' | grep -v grep | grep 'timezone' || exit 1"
      timeout: 5s
    image: ghcr.io/open-webui/mcpo:latest
    restart: unless-stopped
    volumes:
      - ./conf/mcp:/app/conf:ro

  nginx:
    depends_on:
      - watchtower
    env_file: env/nginx.env
    healthcheck:
      interval: 30s
      retries: 5
      start_period: 5s
      test: curl -fsSL http://127.0.0.1/health | grep -q '"status":\s*true' || exit 1
      timeout: 5s
    image: nginx:latest
    ports:
      - "${HOST_PORT}:80"
    restart: unless-stopped
    volumes:
      - ./conf/nginx/templates:/etc/nginx/templates

  ollama:
    depends_on:
      - watchtower
    env_file: env/ollama.env
    healthcheck:
      interval: 30s
      retries: 5
      start_period: 10s
      test: ps aux | grep  -v grep | grep '/bin/ollama serve' || exit 1
      timeout: 5s
    image: ollama/ollama:latest
    restart: unless-stopped
    volumes:
      - ollama:/root/.ollama

  openwebui:
    depends_on:
      - auth
      - docling
      - postgres
      - edgetts
      - mcp
      - nginx
      - ollama
      - searxng
      - tika
      - watchtower
    env_file: env/openwebui.env
    healthcheck:
      interval: 30s
      retries: 5
      start_period: 10s
      test: curl --fail http://localhost:8080/health || exit 1
      timeout: 5s
    image: ghcr.io/open-webui/open-webui:main
    restart: unless-stopped
    volumes:
      - openwebui:/app/backend/data

  postgres:
    depends_on:
      - watchtower
    env_file: env/postgres.env
    healthcheck:
      interval: 30s
      retries: 5
      start_period: 20s
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      timeout: 5s
    image: pgvector/pgvector:pg15
    restart: unless-stopped
    volumes:
      - postgres:/var/lib/postgresql/data

  redis:
    depends_on:
      - watchtower
    env_file: env/redis.env
    healthcheck:
      interval: 30s
      retries: 5
      start_period: 20s
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      timeout: 3s
    image: redis/redis-stack:latest
    restart: unless-stopped

  searxng:
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
      - DAC_OVERRIDE
    cap_drop:
      - ALL
    env_file: env/searxng.env
    depends_on:
      - redis
      - watchtower
    healthcheck:
      interval: 30s
      retries: 5
      start_period: 10s
      test: wget -qO- http://127.0.0.1:8080/ > /dev/null || exit 1
      timeout: 5s
    image: searxng/searxng:2025.5.18-5dff826
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"
    restart: unless-stopped
    volumes:
      - searxng:/etc/searxng

  tika:
    env_file: env/tika.env
    healthcheck:
      interval: 30s
      retries: 5
      start_period: 5s
      test: wget -qO- http://127.0.0.1:9998/tika > /dev/null || exit 1
      timeout: 5s
    image: apache/tika:latest-full
    restart: unless-stopped

  watchtower:
    command: --cleanup --debug --interval 300
    env_file: env/watchtower.env
    image: containrrr/watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

volumes:
  ollama:
    external: false
  openwebui:
    external: false
  postgres:
    external: false
  searxng:
    external: false
